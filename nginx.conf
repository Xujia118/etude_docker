user nginx;  # Nginx user (optional, for security reasons)
worker_processes auto;  # Number of worker processes (auto for multi-core servers)

error_log /var/log/nginx/error.log warn;  # Error log
pid /var/run/nginx.pid;  # Nginx PID file location

events {
    worker_connections 1024;  # Maximum number of simultaneous connections per worker
}

http {
    include       /etc/nginx/mime.types;  # Mime types to serve files correctly
    default_type  application/octet-stream;  # Default MIME type

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;  # Access log format

    sendfile on;  # Enables efficient file transfers
    tcp_nopush on;  # Optimizes for larger file transfers
    tcp_nodelay on;  # Improves latency for small files
    keepalive_timeout 65;  # Timeout for keeping connections open
    types_hash_max_size 2048;  # Maximum hash size for MIME types

    server {
        listen 80;  # Listen on port 80 for HTTP requests
        server_name localhost;  # Server name

        # Serve static files from the frontend build directory
        location / {
            root /usr/share/nginx/html;  # Location where frontend build is copied
            try_files $uri $uri/ /index.html;  # Serve index.html for unrecognized paths
        }

        # Proxy API requests to the backend
        location /api/ {
            proxy_pass http://localhost:3000;  # Backend API server
            proxy_http_version 1.1;  # Support for WebSockets (needed for upgrade headers)
            proxy_set_header Upgrade $http_upgrade;  # Handle WebSocket upgrade
            proxy_set_header Connection 'upgrade';  # WebSocket connection headers
            proxy_set_header Host $host;  # Ensure correct host header is passed
            proxy_cache_bypass $http_upgrade;  # Prevent caching of API requests
        }

        # Handle 404 errors for unknown routes
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Handle 500 errors for server-side issues
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
